{"version":3,"sources":["repeat.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Select","styled","select","_templateObject","InputText","input","attrs","type","_templateObject2","Button","button","_templateObject3","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","amount","fromCurrency","toCurrency","rate","decimals","currencies","changeAmount","bind","assertThisInitialized","setFromCurrency","setToCurrency","getRate","switch","setTimeout","localStorage","clear","e","value","target","setState","_this2","_this$state","getItem","concat","fetch","then","res","json","rates","Intl","NumberFormat","style","currency","minimumFractionDigits","format","setItem","_this$state2","react_default","a","createElement","className","defaultValue","onChange","map","cur","i","key","src","repeat","alt","onClick","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.449c2f85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/repeat.659ef7ae.svg\";","import React, { Component } from 'react';\nimport styled from 'styled-components'; \nimport repeat from './repeat.svg';\nimport './App.css';\n\nconst Select = styled.select`\n  padding: 15px;\n  font-size: calc(10px + 1vmin);\n  background: #fff;\n  display: inline-block;\n  border: 1px solid #fff;\n`;\n\nconst InputText = styled.input.attrs({\n  type: 'number'\n})`\n  width: 100px;\n  margin: 0 15px;\n  padding: 15px;\n  border: none;\n  border-bottom: 2px solid #147d88;\n  background: none;\n  text-align: center;\n  font-size: calc(10px + 1vmin);\n  outline: none;\n`;\n\nconst Button = styled.button`\n  margin: 0 20px;\n  padding: 15px 30px;\n  background: #08d208;\n  color: yellow;\n  border: 2px solid #07c707;\n  font-size: calc(10px + 1vmin);\n  outline: none;\n  vertical-align: bottom;\n  text-transform: uppercase;\n  font-weight: bold;\n  cursor: pointer;\n`;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      amount: 1,\n      fromCurrency: 'EUR',\n      toCurrency: 'USD',\n      rate: 0,\n      decimals: 2,\n      currencies: ['BGN','CAD','BRL','HUF','DKK','JPY','ILS','TRY','RON','GBP','PHP','HRK','NOK','USD','EUR','MXN','AUD','IDR','KRW','HKD','ZAR','ISK','CZK','THB','MYR','NZD','PLN','SEK','RUB','CNY','SGD','CHF','INR']\n    }\n\n    this.changeAmount = this.changeAmount.bind(this);\n    this.setFromCurrency = this.setFromCurrency.bind(this);\n    this.setToCurrency = this.setToCurrency.bind(this);\n    this.getRate = this.getRate.bind(this);\n    this.switch = this.switch.bind(this);\n\n    setTimeout(function() {\n      localStorage.clear();\n    }, 3600000);\n  }\n\n  componentDidMount() {\n    this.getRate();\n  }\n\n  changeAmount(e) {\n    const { value } = e.target;\n    this.setState({ amount: value ? value : 1 });\n  }\n\n  setFromCurrency(e) {\n    this.setState({ fromCurrency: e.target.value });\n  }\n\n  setToCurrency(e) {\n    this.setState({ toCurrency: e.target.value });\n  }\n  \n  getRate() {\n    const { fromCurrency, toCurrency } = this.state;\n    this.setState({ rate: 'Loading...' });\n\n    // CACHE to localStorage\n    if(localStorage.getItem(`${this.state.fromCurrency}-${this.state.toCurrency}`) != null) {\n      const rate = localStorage.getItem(`${this.state.fromCurrency}-${this.state.toCurrency}`);\n      this.setState({ rate: new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: this.state.toCurrency,\n        minimumFractionDigits: this.state.decimals,\n      }).format(rate * this.state.amount) });\n      return;\n    }\n\n    fetch(`https://api.exchangeratesapi.io/latest?base=${fromCurrency}&symbols=${toCurrency}`)\n    .then(res => res.json())\n    .then(json => {\n      const rate = json.rates[toCurrency];\n      this.setState({ rate: new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: this.state.toCurrency,\n        minimumFractionDigits: this.state.decimals,\n      }).format(rate * this.state.amount) });\n      \n      localStorage.setItem(`${this.state.fromCurrency}-${this.state.toCurrency}`, rate);\n    });\n  }\n\n  switch() {\n    const { toCurrency, fromCurrency } = this.state;\n    this.setState({ fromCurrency: toCurrency });\n    this.setState({ toCurrency: fromCurrency });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-title\">\n          <h1>Palitan</h1>\n          <p>Simple currency exchange rate.</p>\n        </header>\n        <div className=\"App-header\">\n          <div>\n            <InputText defaultValue={this.state.amount} onChange={this.changeAmount} />\n            <Select value={this.state.fromCurrency} onChange={this.setFromCurrency}>\n              {\n                this.state.currencies.map((cur, i) => <option value={cur} key={i}>{cur}</option>)\n              }\n            </Select>\n            <img src={repeat} alt=\"\" className=\"repeat\" onClick={this.switch} />\n            <Select value={this.state.toCurrency} onChange={this.setToCurrency}>\n              {\n                this.state.currencies.map((cur, i) => <option value={cur} key={i}>{cur}</option>)\n              }\n            </Select>\n            <Button className=\"equals\" onClick={this.getRate}>Convert</Button>\n          </div>\n          <p className=\"xchange\">{this.state.rate}</p>\n        </div>\n        <footer>\n          <p>&lt;/&gt; with &lt;3 by <a href=\"https://markanthonyuy.com\">markanthonyuy</a></p>\n          <p>Powered by <a href=\"https://facebook.github.io/react/\">Reactjs</a> API by <a href=\"https://exchangeratesapi.io/\">Exchange Rates API</a></p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}